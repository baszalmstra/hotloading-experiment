{# THIS File is not automatically generated:
the below applies to the result of this template
#}// This file is automatically generated based on the file `./generated.rs.tera` when `cargo gen-syntax` is run
// Do not edit manually

//! This module contains auto-generated Rust AST. Like `SyntaxNode`s, AST nodes
//! are generic over ownership: `X<'a>` things are `Copy` references, `XNode`
//! are Arc-based. You can switch between the two variants using `.owned` and
//! `.borrowed` functions. Most of the code works with borrowed mode, and only
//! this mode has all AST accessors.

use rowan::TransparentNewType;

use crate::{
    SyntaxNode, SyntaxKind::*,
    syntax_node::{TreeArc},
    ast::{self, AstNode},
};

{% for node, methods in ast %}
// {{ node }}

{%- if methods.enum %}
#[derive(Debug, PartialEq, Eq, Hash)]
#[repr(transparent)]
pub struct {{ node }} {
    pub(crate) syntax: SyntaxNode,
}
unsafe impl TransparentNewType for {{ node }} {
    type Repr = rowan::SyntaxNode;
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum {{ node }}Kind<'a>{
{%- for kind in methods.enum %}
    {{ kind }}(&a {{ kind }}),
{%- endfor %}
}

{%- for kind in methods.enum %}
impl<'a> From<&'a {{ kind }}> for &'a {{ node }} {
    fn from(n: &'a {{ kind }}) -> &'a {{ node }} {
        {{ node }}::cast(&n.syntax).unwrap()
    }
}
{%- endfor %}

impl AstNode for {{ node }} {
    fn cast(syntax: &SyntaxNode) -> Option<&self> {
        match syntax.kind() {
            {% for kind in methods.enum %}
            | {{ kind | SCREAM }}
            {%- endfor %} => Some({{ node }}::from_repr(syntax.into_repr())),
            _ => None,
        }
    }
    fn syntax(&self) -> &SyntaxNode { &self.syntax }
}

impl ToOwned for {{ node }} {
    type Owned = TreeArc<{{ node }}>;
    fn to_owned(&self) -> TreeArc<{{ node }}> { TreeArc::cast(self.syntax.to_owned()) }
}

impl {{ node }} {
    pub fn kind(&self) -> {{ node }}Kind {
        match self.syntax.kind() {
            {%- for kind in methods.enum %}
            {{ kind | SCREAM }} => {{ node }}Kind::{{ kind }}({{ kind }}::cast(&self.syntax).unwrap()),
            {%- endfor %}
            _ => unreachable(),
        }
    }
}
{% else %}
#[derive(Debug, PartialEq, Eq, Hash)]
#[repr(transparent)]
pub struct {{ node }} {
    pub(crate) syntax: SyntaxNode,
}

unsafe impl TransparentNewType for {{ node }} {
    type Repr = rowan::SyntaxNode;
}

impl AstNode for {{ node }} {
    fn cast(syntax: &SyntaxNode) -> Option<&Self> {
        match syntax.kind() {
            {{ node | SCREAM }} => Some({{ node }}::from_repr(syntax.into_repr())),
            _ => None,
        }
    }
    fn syntax(&self) -> &SyntaxNode { &self.syntax }
}

impl ToOwned for {{ node }} {
    type Owned = TreeArc<{{ node }}>;
    fn to_owned(&self) -> TreeArc<{{ node }}> { TreeArc::cast(self.syntax.to_owned()) }
}

{% endif %}

impl {{ node }} {
}

{% endfor %}